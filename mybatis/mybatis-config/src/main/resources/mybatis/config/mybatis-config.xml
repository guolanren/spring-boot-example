<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <!-- 属性 -->
    <properties resource="jdbc.properties">
        <property name="other" value="other"/>
    </properties>

    <!-- 设置 -->
    <settings>
        <!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。 -->
        <!-- true | false -->
        <!-- true -->
        <setting name="cacheEnabled" value="true"/>

        <!-- 延迟加载的全局开关。
             当开启时，所有关联对象都会延迟加载。
             特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 -->
        <!-- true | false -->
        <!-- false -->
        <setting name="lazyLoadingEnabled" value="true"/>

        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性。
             否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 -->
        <!-- true | false -->
        <!-- false （在 3.4.1 及之前的版本默认值为 true） -->
        <setting name="aggressiveLazyLoading" value="false"/>
        
        <!-- 是否允许单一语句返回多结果集（需要驱动支持）。 -->
        <!-- true | false	 -->
        <!-- true -->
        <setting name="multipleResultSetsEnabled" value="true"/>

        <!-- 使用列标签代替列名。
             不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 -->
        <!-- true | false -->
        <!-- true -->
        <setting name="useColumnLabel" value="true"/>

        <!-- 允许 JDBC 支持自动生成主键，需要驱动支持。
             如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。 -->
        <!-- true | false -->
        <!-- false -->
        <setting name="useGeneratedKeys" value="false"/>

        <!-- 指定 MyBatis 应如何自动映射列到字段或属性。
             NONE 表示取消自动映射；
             PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。
             FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 -->
        <!-- NONE, PARTIAL, FULL -->
        <!-- PARTIAL -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>

        <!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。
             NONE: 不做任何反应
             WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
             FAILING: 映射失败 (抛出 SqlSessionException) -->
        <!-- NONE, WARNING, FAILING -->
        <!-- NONE -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>

        <!-- 配置默认的执行器。
             SIMPLE 就是普通的执行器；
             REUSE 执行器会重用预处理语句（prepared statements）；
             BATCH 执行器将重用语句并执行批量更新。 -->
        <!-- SIMPLE, REUSE, BATCH -->
        <!-- SIMPLE -->
        <setting name="defaultExecutorType" value="SIMPLE"/>

        <!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
        <!-- 任意正整数 -->
        <!-- 未设置 (null) -->
        <setting name="defaultStatementTimeout" value="25"/>

        <!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。
             此参数只可以在查询设置中被覆盖。 -->
        <!-- 任意正整数 -->
        <!-- 未设置 (null) -->
        <setting name="defaultFetchSize" value="100"/>

        <!-- Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2) -->
        <!-- FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT(same behavior with 'Not Set') -->
        <!-- 未设置 (null) -->
        <setting name="defaultResultSetType" value="DEFAULT"/>

        <!-- 允许在嵌套语句中使用分页（RowBounds）。
             如果允许使用则设置为 false。 -->
        <!-- true | false -->
        <!-- false -->
        <setting name="safeRowBoundsEnabled" value="false"/>

        <!-- 允许在嵌套语句中使用分页（ResultHandler）。
             如果允许使用则设置为 false。 -->
        <!-- true | false -->
        <!-- true -->
        <setting name="safeResultHandlerEnabled" value="true"/>

        <!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 -->
        <!-- true | false -->
        <!-- false -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>

        <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
             默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
             若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 -->
        <!-- SESSION | STATEMENT -->
        <!-- SESSION -->
        <setting name="localCacheScope" value="SESSION"/>

        <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。
             某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 -->
        <!-- JdbcType 常量，常用值：NULL, VARCHAR 或 OTHER。 -->
        <!-- OTHER -->
        <setting name="jdbcTypeForNull" value="OTHER"/>

        <!-- 指定哪个对象的方法触发一次延迟加载。 -->
        <!-- 用逗号分隔的方法列表。 -->
        <!-- equals,clone,hashCode,toString -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>

        <!-- 指定动态 SQL 生成的默认语言。 -->
        <!-- 一个类型别名或完全限定类名。 -->
        <!-- org.apache.ibatis.scripting.xmltags.XMLLanguageDriver -->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>

        <!-- 指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5） -->
        <!-- 一个类型别名或完全限定类名。 -->
        <!-- org.apache.ibatis.type.EnumTypeHandler -->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>

        <!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。
             注意基本类型（int、boolean 等）是不能设置成 null 的。 -->
        <!-- true | false -->
        <!-- false -->
        <setting name="callSettersOnNulls" value="false"/>

        <!-- 当返回行的所有列都是空时，MyBatis默认返回 null。
             当开启这个设置时，MyBatis会返回一个空实例。
             请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2） -->
        <!-- true | false -->
        <!-- false -->
        <setting name="returnInstanceForEmptyRow" value="false"/>

        <!-- 指定 MyBatis 增加到日志名称的前缀。 -->
        <!-- 任何字符串 -->
        <!-- 未设置 (null) -->
        <setting name="logPrefix" value=""/>

        <!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 -->
        <!-- SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING -->
        <!-- 未设置 (null) -->
        <setting name="logImpl" value=""/>

        <!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 -->
        <!-- CGLIB | JAVASSIST -->
        <!-- JAVASSIST （MyBatis 3.3 以上） -->
        <setting name="proxyFactory" value="JAVASSIST"/>

        <!-- 指定 VFS 的实现 -->
        <!-- 自定义 VFS 的实现的类全限定名，以逗号分隔。 -->
        <!-- 未设置 (null) -->
        <setting name="vfsImpl" value=""/>

        <!-- 允许使用方法签名中的名称作为语句参数名称。
             为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） -->
        <!-- true | false -->
        <!-- true -->
        <setting name="useActualParamName" value="true"/>

        <!-- 指定一个提供 Configuration 实例的类。
             这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。
             这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3） -->
        <!-- 类型别名或者全类名 -->
        <!-- 未设置 (null) -->
        <setting name="configurationFactory" value=""/>
    </settings>

    <!-- 类型别名 -->
    <typeAliases>
        <typeAlias alias="user" type="name.guolanren.model.User"/>
        <package name="name.guolanren.model"/>
    </typeAliases>

    <!-- 类型处理器 -->
    <typeHandlers>
        <typeHandler handler="name.guolanren.typehandler.ExampleTypeHandler"/>
        <package name="name.guolanren.typehandler"/>
    </typeHandlers>

    <!-- 对象工厂 -->
    <objectFactory type="name.guolanren.objectfactory.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>

    <!-- 插件 -->
    <plugins>
        <plugin interceptor="name.guolanren.plugin.ExamplePlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>

    <!-- 环境配置 -->
    <environments default="development">
        <environment id="development">
            <!-- 事务管理器 -->
            <!--  type=”[JDBC|MANAGED]” -->
            <transactionManager type="JDBC">
                <property name="autoCommit" value="false"/>
            </transactionManager>

            <!-- 数据源 -->
            <!--  type=”[UNPOOLED|POOLED|JNDI]” -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 数据库厂商标识 -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <!-- 映射器 -->
    <mappers>
        <mapper resource="mybatis/mapper/UserMapper.xml"/>
        <mapper class="name.guolanren.mapper.UserMapper"/>
        <package name="name.guolanren.mapper"/>
    </mappers>
</configuration>